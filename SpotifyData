# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL.

SELECT * 
FROM BIT_DB.Spotifydata;

-- Which artist appears the most on the chart and what is their avg popularity?
SELECT  artist_name, COUNT(*) AS artist_count
, AVG(popularity)
FROM spotifydata
GROUP BY artist_name
ORDER BY artist_count DESC
LIMIT 1;

-- What is the average danceabliity for the top 5 popular songs?
SELECT AVG(danceability) AS average_danceability
FROM (
SELECT danceability
    FROM spotifydata
    ORDER BY popularity DESC
    LIMIT 5
 )AS top_5_songs;
 
-- Which artist has the highest average liveness?
SELECT artist_name
, AVG(liveness) AS average_liveness
FROM spotifydata
GROUP BY artist_name
ORDER BY liveness DESC
LIMIT 1;

-- Which song has the longest duration?
SELECT track_name AS song
, duration_ms
     , printf('%02d:%02d', FLOOR(duration_ms / 1000 / 60), 
     FLOOR((duration_ms / 1000) % 60))
      AS DURATION_IN_MINUTES
FROM spotifydata
ORDER BY duration_ms DESC
LIMIT 5;

-- Which song has the lowest energy?
SELECT track_name as song
, energy
FROM spotifydata
GROUP BY song
ORDER BY energy DESC
LIMIT 1;
